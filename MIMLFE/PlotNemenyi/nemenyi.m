function [p, nemenyi, meanrank, CDa, rankmean] = nemenyi(data, reps, varargin)
% Evaluate models using Freidman/Kruskal-Wallis and Nemenyi tests
%
% Syntax [p, nemenyi] = nemenyi(data, 'Properties', ...)

%% Argument Check
if nargin<2 && ~iscell(data)
    error('Too few arguments')
end
%% Input variables check
% Default
cmap = 'winter';
alph = 0.05;
ploton = 'voline';
labels = [];
% Default names
if length(varargin) > 1
      okargs =   {'colormap' 'alpha' 'labels' 'ploton'};
      defaults = { cmap       alph    labels   ploton};
      [~, ~, cmap, alph, labels, ploton] = statgetargs(okargs,defaults,varargin{:});
end
% Find size of data matrix - columns are different models
if ~iscell(data)
    [r, k] = size(data);
    % Test for number of rows vs reps
    r = r/reps;
    if (floor(r) ~= r), 
       error('stats:friedman:BadSize',...
             'The number of rows must be a multiple of REPS.');
    end
else
    k = numel(data{1});
    r = data{2};
    % Rows vs reps is not tested in this case
    meanrank = data{1};
end
% Prepare labels
if isempty(labels)
    labels = [repmat('Model ',k,1) num2str((1:k)')];
    labels = mat2cell(labels,ones(k,1),size(labels,2));
elseif numel(labels)~=k
    error('nemenyi:labels','Incorrect number of labels')
end
%% Test Freidman or Kruskal-Wallis
if ~iscell(data)
    % If results data is provided
    if r>1
        p = friedman(data,reps,'off');
        lblt = 'Friedman ';
    else
        p = kruskalwallis(data,[],'off');
        lblt = 'Kruskal-Wallis ';
    end
else
    % If mean ranks are provided
    % Input is already average ranks for each model, so I test using the
    % following form of Friedman's
    % Koning et al, 2005 IJF
    S = ((12*r)/(k*(k+1)))*sum((meanrank-((k+1)/2)).^2);
    p = 1 - chi2cdf(S, k-1);
    lblt = 'Friedman ';
end
%% Nemenyi Test
% Hardcoded tables for nemenyi test 
% 1st row is for alpha = 0.01, second is for 0.05 and third for 0.10
% For up to 100 different models (columns of data<=100)
q = [2.57582949100000,2.91349419200000,3.11325044300000,3.25468594200000,3.36374019200000,3.45221268500000,3.52647091800000,3.59033892400000,3.64629157700000,3.69602098200000,3.74073346500000,3.78131856600000,3.81845086500000,3.85265432700000,3.88434331700000,3.91385017600000,3.94144643200000,3.96735694600000,3.99176980800000,4.01484199500000,4.03670927200000,4.05748760500000,4.07727528100000,4.09616068900000,4.11421948900000,4.13151885600000,4.14811818800000,4.16406910300000,4.17941968400000,4.19421235800000,4.20848389400000,4.22226894100000,4.23559861100000,4.24850118800000,4.26100212900000,4.27312476800000,4.28489102400000,4.29631999100000,4.30743005300000,4.31823818000000,4.32875992900000,4.33900944200000,4.34899944700000,4.35874337800000,4.36825184300000,4.37753615500000,4.38660550600000,4.39547050400000,4.40413892600000,4.41261925800000,4.42091857000000,4.42904605500000,4.43700666400000,4.44480746600000,4.45245482500000,4.45995440000000,4.46731113900000,4.47452999200000,4.48161732300000,4.48857596100000,4.49541156200000,4.50212837000000,4.50872921200000,4.51521833000000,4.52159996900000,4.52787695600000,4.53405212000000,4.54012970200000,4.54611182600000,4.55200202500000,4.55780242200000,4.56351513800000,4.56914370800000,4.57469025300000,4.58015689600000,4.58554575700000,4.59085966400000,4.59609932500000,4.60126756900000,4.60636580900000,4.61139687400000,4.61648167800000,4.62126101300000,4.62609833100000,4.63087413000000,4.63559053200000,4.64024683000000,4.64484726700000,4.64939184200000,4.65388197000000,4.65831906500000,4.66270383400000,4.66703769200000,4.67132275900000,4.67555832900000,4.67974652200000,4.68388875400000,4.68798502300000,4.69203674500000;...
     1.95996423300000,2.34370047600000,2.56903207300000,2.72777471700000,2.84970538200000,2.94831990800000,3.03087886700000,3.10173026000000,3.16368342000000,3.21865390100000,3.26800359100000,3.31273870100000,3.35361795900000,3.39123038200000,3.42604124900000,3.45842461900000,3.48868454600000,3.51707276200000,3.54379927700000,3.56904016100000,3.59294602700000,3.61564627600000,3.63725263100000,3.65786055100000,3.67755630300000,3.69641342700000,3.71449839000000,3.73186917500000,3.74857810800000,3.76467185800000,3.78019285200000,3.79517856600000,3.80966364900000,3.82367921200000,3.83725424800000,3.85041350500000,3.86318102500000,3.87557872900000,3.88762712100000,3.89934458700000,3.91074739100000,3.92185250300000,3.93267335900000,3.94322409900000,3.95351815900000,3.96356614700000,3.97337937500000,3.98296845000000,3.99234327100000,4.00151232500000,4.01048480300000,4.01926777600000,4.02786973000000,4.03629702900000,4.04455603600000,4.05265453000000,4.06059675300000,4.06838977700000,4.07603784400000,4.08354731800000,4.09092102800000,4.09816604400000,4.10528448800000,4.11228201600000,4.11916145800000,4.12592705600000,4.13258234500000,4.13913156800000,4.14557613900000,4.15192100800000,4.15816829700000,4.16432083300000,4.17038073800000,4.17635225500000,4.18223679700000,4.18803648700000,4.19375486000000,4.19939262200000,4.20495260300000,4.21043763000000,4.21584841100000,4.22118706700000,4.22645572000000,4.23165649000000,4.23679079300000,4.24185933400000,4.24686494300000,4.25180903400000,4.25669231300000,4.26151619600000,4.26628280200000,4.27099284100000,4.27564843200000,4.28024957500000,4.28479839300000,4.28929488500000,4.29374188000000,4.29813937700000,4.30248879100000;...
     1.64485341000000,2.05229258000000,2.29134134100000,2.45951608200000,2.58852064300000,2.69273191900000,2.77988353700000,2.85460633900000,2.91988855800000,2.97776807700000,3.02969446300000,3.07673332800000,3.11969360000000,3.15919894900000,3.19574364200000,3.22972365800000,3.26146143900000,3.29122427000000,3.31923277000000,3.34567573500000,3.37071155800000,3.39447671000000,3.41708927700000,3.43865108500000,3.45925264100000,3.47897172700000,3.49787764100000,3.51603260800000,3.53349248900000,3.55030536700000,3.56651649700000,3.58216477000000,3.59728766200000,3.61191699500000,3.62608387900000,3.63981447800000,3.65313424900000,3.66606581800000,3.67863039800000,3.69084778900000,3.70273637500000,3.71431171300000,3.72558935900000,3.73658416300000,3.74730955800000,3.75777756700000,3.76799950300000,3.77798738600000,3.78774970200000,3.79729705800000,3.80663793900000,3.81578153700000,3.82473492300000,3.83350516800000,3.84210075800000,3.85052664200000,3.85879059900000,3.86689757900000,3.87485323700000,3.88266323100000,3.89033321900000,3.89786673400000,3.90526872800000,3.91254344300000,3.91969582800000,3.92672941900000,3.93364704500000,3.94045294700000,3.94715137000000,3.95374443300000,3.96023567400000,3.96662862600000,3.97292470500000,3.97912815300000,3.98524038400000,3.99126493400000,3.99720392300000,4.00305876800000,4.00883300100000,4.01452804000000,4.02014671000000,4.02568972000000,4.03115989800000,4.03655865800000,4.04188741500000,4.04714899700000,4.05234481700000,4.05747558400000,4.06254341800000,4.06754973400000,4.07249523900000,4.07738276100000,4.08221300800000,4.08698668600000,4.09170520900000,4.09637070000000,4.10098315700000,4.10554470300000,4.11005533700000;]; 
 if ~iscell(data)
    % Get a matrix of ranks.  For the unusual case of replicated
    % measurements, rank together all replicates in the same row.  This
    % is the advice given by Zar (1996), "Biostatistical Analysis."
    m = nan(reps*r,k);
    for j=1:r
       jrows = reps * (j-1) + (1:reps);
       v = data(jrows,:);
       a = tiedrank(v(:));
       m(jrows,:) = reshape(a, reps, k);
    end
    meanrank=mean(m);
 end
% Find critical distance
    q = q(:,k-1);
    N = r;
    CDa=q*sqrt((k*(k+1))/(6*N));
    switch alph
        case 0.01
            CD = CDa(1);
        case 0.05
            CD = CDa(2);
        case 0.10
            CD = CDa(3);
        otherwise
            error('nemenyi:alpha','Alpha must be either 0.01, 0.05 or 0.10')
    end
% Produce comparison matrix
    % 0 = same, 1 = different
    nemenyi = abs(bsxfun(@minus,meanrank,meanrank'));
    nemenyi = ~(nemenyi<CD);
    nemenyi = single(nemenyi);
    nemenyi(1:k+1:end) = nan(k,1);
%% Find model ranking
if nargout>4 || ~strcmp(ploton,'off')
    rankmean = tiedrank(meanrank);
end
end